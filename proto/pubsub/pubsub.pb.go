// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pubsub.proto

/*
Package pubsub is a generated protocol buffer package.

It is generated from these files:
	pubsub.proto

It has these top-level messages:
	Topic
	Data
	Answer
*/
package pubsub

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Topic struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Data struct {
	Topic   string `protobuf:"bytes,1,opt,name=Topic,json=topic" json:"Topic,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Data) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Data) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Answer struct {
	Subsriptions int32 `protobuf:"varint,1,opt,name=Subsriptions,json=subsriptions" json:"Subsriptions,omitempty"`
}

func (m *Answer) Reset()                    { *m = Answer{} }
func (m *Answer) String() string            { return proto.CompactTextString(m) }
func (*Answer) ProtoMessage()               {}
func (*Answer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Answer) GetSubsriptions() int32 {
	if m != nil {
		return m.Subsriptions
	}
	return 0
}

func init() {
	proto.RegisterType((*Topic)(nil), "pubsub.Topic")
	proto.RegisterType((*Data)(nil), "pubsub.Data")
	proto.RegisterType((*Answer)(nil), "pubsub.Answer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PubSub service

type PubSubClient interface {
	//
	// подписаться на обновление топика
	// метод возращает стрим данных
	// данные приходит из стрима клиентам , когда сервер узнает о обновлении этого топика
	// например:
	//
	// stream := client.Subscribe("topic")
	// go func () {
	// client.Publish("topic",[]byte(`new data`))
	// }()
	//
	// if stream.Recv() != []byte(`new data`) {
	// println(`ERROR`)
	// }
	//
	Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (PubSub_SubscribeClient, error)
	Publish(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Answer, error)
}

type pubSubClient struct {
	cc *grpc.ClientConn
}

func NewPubSubClient(cc *grpc.ClientConn) PubSubClient {
	return &pubSubClient{cc}
}

func (c *pubSubClient) Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (PubSub_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PubSub_serviceDesc.Streams[0], c.cc, "/pubsub.PubSub/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSub_SubscribeClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type pubSubSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubSubSubscribeClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubSubClient) Publish(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := grpc.Invoke(ctx, "/pubsub.PubSub/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PubSub service

type PubSubServer interface {
	//
	// подписаться на обновление топика
	// метод возращает стрим данных
	// данные приходит из стрима клиентам , когда сервер узнает о обновлении этого топика
	// например:
	//
	// stream := client.Subscribe("topic")
	// go func () {
	// client.Publish("topic",[]byte(`new data`))
	// }()
	//
	// if stream.Recv() != []byte(`new data`) {
	// println(`ERROR`)
	// }
	//
	Subscribe(*Topic, PubSub_SubscribeServer) error
	Publish(context.Context, *Data) (*Answer, error)
}

func RegisterPubSubServer(s *grpc.Server, srv PubSubServer) {
	s.RegisterService(&_PubSub_serviceDesc, srv)
}

func _PubSub_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Topic)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServer).Subscribe(m, &pubSubSubscribeServer{stream})
}

type PubSub_SubscribeServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type pubSubSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubSubSubscribeServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _PubSub_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubsub.PubSub/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).Publish(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

var _PubSub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.PubSub",
	HandlerType: (*PubSubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubSub_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubSub_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}

func init() { proto.RegisterFile("pubsub.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0x86, 0x37, 0xd2, 0xa6, 0xec, 0x10, 0x3d, 0x0c, 0x1e, 0xca, 0x7a, 0x59, 0x72, 0x5a, 0x61,
	0x59, 0x44, 0xc1, 0xbb, 0xe0, 0x59, 0x4a, 0xeb, 0x1f, 0xc8, 0xd4, 0x80, 0x81, 0xb6, 0x09, 0xf9,
	0x40, 0xfc, 0xf7, 0xd2, 0xb4, 0x05, 0xf7, 0xf8, 0xe4, 0x7d, 0x33, 0xf3, 0x0c, 0x08, 0x97, 0x28,
	0x24, 0xba, 0x38, 0x6f, 0xa3, 0x45, 0xbe, 0x90, 0x7c, 0x80, 0xf2, 0xd3, 0x3a, 0xd3, 0x23, 0x42,
	0xf1, 0xa1, 0x46, 0x5d, 0xb3, 0x23, 0x3b, 0xed, 0xdb, 0x62, 0x52, 0xa3, 0x96, 0xaf, 0x50, 0xbc,
	0xab, 0xa8, 0xf0, 0x7e, 0x2d, 0xad, 0x61, 0x19, 0xf3, 0x8f, 0x1a, 0xaa, 0x46, 0xfd, 0x0e, 0x56,
	0x7d, 0xd5, 0x37, 0x47, 0x76, 0x12, 0x6d, 0xe5, 0x16, 0x94, 0x67, 0xe0, 0x6f, 0x53, 0xf8, 0xd1,
	0x1e, 0x25, 0x88, 0x2e, 0x51, 0xf0, 0xc6, 0x45, 0x63, 0xa7, 0x90, 0x07, 0x94, 0xad, 0x08, 0xff,
	0xde, 0x9e, 0x15, 0xf0, 0x26, 0x51, 0x97, 0x08, 0xcf, 0xb0, 0x9f, 0xdb, 0xbd, 0x37, 0xa4, 0xf1,
	0xf6, 0xb2, 0x0a, 0xe7, 0xd5, 0x07, 0xb1, 0xe1, 0x6c, 0x24, 0x77, 0x4f, 0x0c, 0x1f, 0xa1, 0x6a,
	0x12, 0x0d, 0x26, 0x7c, 0xe3, 0x55, 0x78, 0xb8, 0xdb, 0x68, 0x91, 0x90, 0x3b, 0xe2, 0xf9, 0xe8,
	0x97, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xf5, 0xdc, 0x52, 0x04, 0x01, 0x00, 0x00,
}
